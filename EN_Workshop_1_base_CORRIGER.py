#! -*- coding: utf-8 -*-
"""
Code à compléter pour le Workshop 1

"""
import this

### First Exercice:
# Commencons par assigner des séquences d'ADN à des variables:

    # L'ARN 16S de E.coli:
    
# **Eric**: the variable names could be clearer. It is better to have longer
# variable names that can be understood and remembered more easily. The clearer
# they are, the easier they are to remember. See suggestions examples below.
# Also, having four sequences brings little additional benefit to the students.
# They will only have to replicate parts of the code four times. Why not use
# only one sequence?

# ecoli_seq = 
ec_seq = """GCAGAGAAAGCAAAAATAAATGCTTGACTCTGTAGCGGGAAGGCGTATTATGCACACCCCGCGCCGCTGA
GAAAAAGCGAAGCGGCACTGCTCTTTAACAATTTATCAGACAATCTGTGTGGGCACTCGAAGATACGGAT
TCTTAACGTCGCAAGACGAAAAATGAATACCAAGTCTCAAGAGTGAACACGTAATTCATTACGAAGTTTA
ATTCTTTGAGCGTCAAACTTTTAAATTGAAGAGTTTGATCATGGCTCAGATTGAACGCTGGCGGCAGGCC
TAACACATGCAAGTCGAACGGTAACAGGAAGAAGCTTGCTTCTTTGCTGACGAGTGGCGGACGGGTGAGT
AATGTCTGGGAAACTGCCTGATGGAGGGGGATAACTACTGGAAACGGTAGCTAATACCGCATAACGTCGC
AAGACCAAAGAGGGGGACCTTCGGGCCTCTTGCCATCGGATGTGCCCAGATGGGATTAGCTAGTAGGTGG
GGTAACGGCTCACCTAGGCGACGATCCCTAGCTGGTCTGAGAGGATGACCAGCCACACTGGAACTGAGAC
ACGGTCCAGACTCCTACGGGAGGCAGCAGTGGGGAATATTGCACAATGGGCGCAAGCCTGATGCAGCCAT
GCCGCGTGTATGAAGAAGGCCTTCGGGTTGTAAAGTACTTTCAGCGGGGAGGAAGGGAGTAAAGTTAATA
CCTTTGCTCATTGACGTTACCCGCAGAAGAAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGG
AGGGTGCAAGCGTTAATCGGAATTACTGGGCGTAAAGCGCACGCAGGCGGTTTGTTAAGTCAGATGTGAA
ATCCCCGGGCTCAACCTGGGAACTGCATCTGATACTGGCAAGCTTGAGTCTCGTAGAGGGGGGTAGAATT
CCAGGTGTAGCGGTGAAATGCGTAGAGATCTGGAGGAATACCGGTGGCGAAGGCGGCCCCCTGGACGAAG
ACTGACGCTCAGGTGCGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACG
ATGTCGACTTGGAGGTTGTGCCCTTGAGGCGTGGCTTCCGGAGCTAACGCGTTAAGTCGACCGCCTGGGG
AGTACGGCCGCAAGGTTAAAACTCAAATGAATTGACGGGGGCCCGCACAAGCGGTGGAGCATGTGGTTTA
ATTCGATGCAACGCGAAGAACCTTACCTGGTCTTGACATCCACGGAAGTTTTCAGAGATGAGAATGTGCC
TTCGGGAACCGTGAGACAGGTGCTGCATGGCTGTCGTCAGCTCGTGTTGTGAAATGTTGGGTTAAGTCCC
GCAACGAGCGCAACCCTTATCCTTTGTTGCCAGCGGTCCGGCCGGGAACTCAAAGGAGACTGCCAGTGAT
AAACTGGAGGAAGGTGGGGATGACGTCAAGTCATCATGGCCCTTACGACCAGGGCTACACACGTGCTACA
ATGGCGCATACAAAGAGAAGCGACCTCGCGAGAGCAAGCGGACCTCATAAAGTGCGTCGTAGTCCGGATT
GGAGTCTGCAACTCGACTCCATGAAGTCGGAATCGCTAGTAATCGTGGATCAGAATGCCACGGTGAATAC
GTTCCCGGGCCTTGTACACACCGCCCGTCACACCATGGGAGTGGGTTGCAAAAGAAGTAGGTAGCTTAAC
CTTCGGGAGGGCGCTTACCACTTTGTGATTCATGACTGGGGTGAAGTCGTAACAAGGTAACCGTAGGGGA
ACCTGCGGTTGGATCACCTCCTTACCTTAAAGAAGCGTACTTTGTAGTGCTCACACAGATTGTCTGATAG
AAAGTGAAAAGCAAGGCGTTTACGCGTTGGGAGTGAGGCTGAAGAGAATAAGGCCGTTCGCTTTCTATTA
ATGAAAGCTCACCCTACACGAAAATATCACGCAACGCGTGATAAGCAATTTTCGTGTCCCCTTCGTCTAG
AGGCCCAGGACACCGCCCTTTCACGGCGGTAACAGGGGTTCGAA"""

    # 18s RNA de S. cerevesiae:

# scerevisiae_seq = 
sc_seq = """TATCTGGTTGATCCTGCCAGTAGTCATATGCTTGTCTCAAAGATTAAGCCATGCATGTCT
AAGTATAAGCAATTTATACAGTGAAACTGCGAATGGCTCATTAAATCAGTTATCGTTTAT
TTGATAGTTCCTTTACTACATGGTATAACTGTGGTAATTCTAGAGCTAATACATGCTTAA
AATCTCGACCCTTTGGAAGAGATGTATTTATTAGATAAAAAATCAATGTCTTCGGACTCT
TTGATGATTCATAATAACTTTTCGAATCGCATGGCCTTGTGCTGGCGATGGTTCATTCAA
ATTTCTGCCCTATCAACTTTCGATGGTAGGATAGTGGCCTACCATGGTTTCAACGGGTAA
CGGGGAATAAGGGTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGGA
AGGCAGCAGGCGCGCAAATTACCCAATCCTAATTCAGGGAGGTAGTGACAATAAATAACG
ATACAGGGCCCATTCGGGTCTTGTAATTGGAATGAGTACAATGTAAATACCTTAACGAGG
AACAATTGGAGGGCAAGTCTGGTGCCAGCAGCCGCGGTAATTCCAGCTCCAATAGCGTAT
ATTAAAGTTGTTGCAGTTAAAAAGCTCGTAGTTGAACTTTGGGCCCGGTTGGCCGGTCCG
ATTTTTTCGTGTACTGGATTTCCAACGGGGCCTTTCCTTCTGGCTAACCTTGAGTCCTTG
TGGCTCTTGGCGAACCAGGACTTTTACTTTGAAAAAATTAGAGTGTTCAAAGCAGGCGTA
TTGCTCGAATATATTAGCATGGAATAATAGAATAGGACGTTTGGTTCTATTTTGTTGGTT
TCTAGGACCATCGTAATGATTAATAGGGACGGTCGGGGGCATCAGTATTCAATTGTCAGA
GGTGAAATTCTTGGATTTATTGAAGACTAACTACTGCGAAAGCATTTGCCAAGGACGTTT
TCATTAATCAAGAACGAAAGTTAGGGGATCGAAGATGATCAGATACCGTCGTAGTCTTAA
CCATAAACTATGCCGACTAGGGATCGGGTGGTGTTTTTTTAATGACCCACTCGGCACCTT
ACGAGAAATCAAAGTCTTTGGGTTCTGGGGGGAGTATGGTCGCAAGGCTGAAACTTAAAG
GAATTGACGGAAGGGCACCACCAGGAGTGGAGCCTGCGGCTTAATTTGACTCAACACGGG
GAAACTCACCAGGTCCAGACACAATAAGGATTGACAGATTGAGAGCTCTTTCTTGATTTT
GTGGGTGGTGGTGCATGGCCGTTCTTAGTTGGTGGAGTGATTTGTCTGCTTAATTGCGAT
AACGAACGAGACCTTAACCTACTAAATAGTGGTGCTAGCATTTGCTGGTTATCCACTTCT
TAGAGGGACTATCGGTTTCAAGCCGATGGAAGTTTGAGGCAATAACAGGTCTGTGATGCC
CTTAGACGTTCTGGGCCGCACGCGCGCTACACTGACGGAGCCAGCGAGTCTAACCTTGGC
CGAGAGGTCTTGGTAATCTTGTGAAACTCCGTCGTGCTGGGGATAGAGCATTGTAATTAT
TGCTCTTCAACGAGGAATTCCTAGTAAGCGCAAGTCATCAGCTTGCGTTGATTACGTCCC
TGCCCTTTGTACACACCGCCCGTCGCTAGTACCGATTGAATGGCTTAGTGAGGCCTCAGG
ATCTGCTTAGAGAAGGGGGCAACTCCATCTCAGAGCGGAGAATTTGGACAAACTTGGTCA
TTTAGAGGAACTAAAAGTCGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTA"""

    # de H. spaien:

# hsapiens_seq = 
hs_seq = """TACCTGGTTGATCCTGCCAGTAGCATATGCTTGTCTCAAAGATTAAGCCATGCATGTCTGAGTACGCACG
GCCGGTACAGTGAAACTGCGAATGGCTCATTAAATCAGTTATGGTTCCTTTGGTCGCTCGCTCCTCTCCT
ACTTGGATAACTGTGGTAATTCTAGAGCTAATACATGCCGACGGGCGCTGACCCCCTTCGCGGGGGGGAT
GCGTGCATTTATCAGATCAAAACCAACCCGGTCAGCCCCTCTCCGGCCCCGGCCGGGGGGCGGGCGCCGG
CGGCTTTGGTGACTCTAGATAACCTCGGGCCGATCGCACGCCCCCCGTGGCGGCGACGACCCATTCGAAC
GTCTGCCCTATCAACTTTCGATGGTAGTCGCCGTGCCTACCATGGTGACCACGGGTGACGGGGAATCAGG
GTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGGAAGGCAGCAGGCGCGCAAATTAC
CCACTCCCGACCCGGGGAGGTAGTGACGAAAAATAACAATACAGGACTCTTTCGAGGCCCTGTAATTGGA
ATGAGTCCACTTTAAATCCTTTAACGAGGATCCATTGGAGGGCAAGTCTGGTGCCAGCAGCCGCGGTAAT
TCCAGCTCCAATAGCGTATATTAAAGTTGCTGCAGTTAAAAAGCTCGTAGTTGGATCTTGGGAGCGGGCG
GGCGGTCCGCCGCGAGGCGAGCCACCGCCCGTCCCCGCCCCTTGCCTCTCGGCGCCCCCTCGATGCTCTT
AGCTGAGTGTCCCGCGGGGCCCGAAGCGTTTACTTTGAAAAAATTAGAGTGTTCAAAGCAGGCCCGAGCC
GCCTGGATACCGCAGCTAGGAATAATGGAATAGGACCGCGGTTCTATTTTGTTGGTTTTCGGAACTGAGG
CCATGATTAAGAGGGACGGCCGGGGGCATTCGTATTGCGCCGCTAGAGGTGAAATTCTTGGACCGGCGCA
AGACGGACCAGAGCGAAAGCATTTGCCAAGAATGTTTTCATTAATCAAGAACGAAAGTCGGAGGTTCGAA
GACGATCAGATACCGTCGTAGTTCCGACCATAAACGATGCCGACCGGCGATGCGGCGGCGTTATTCCCAT
GACCCGCCGGGCAGCTTCCGGGAAACCAAAGTCTTTGGGTTCCGGGGGGAGTATGGTTGCAAAGCTGAAA
CTTAAAGGAATTGACGGAAGGGCACCACCAGGAGTGGAGCCTGCGGCTTAATTTGACTCAACACGGGAAA
CCTCACCCGGCCCGGACACGGACAGGATTGACAGATTGATAGCTCTTTCTCGATTCCGTGGGTGGTGGTG
CATGGCCGTTCTTAGTTGGTGGAGCGATTTGTCTGGTTAATTCCGATAACGAACGAGACTCTGGCATGCT
AACTAGTTACGCGACCCCCGAGCGGTCGGCGTCCCCCAACTTCTTAGAGGGACAAGTGGCGTTCAGCCAC
CCGAGATTGAGCAATAACAGGTCTGTGATGCCCTTAGATGTCCGGGGCTGCACGCGCGCTACACTGACTG
GCTCAGCGTGTGCCTACCCTACGCCGGCAGGCGCGGGTAACCCGTTGAACCCCATTCGTGATGGGGATCG
GGGATTGCAATTATTCCCCATGAACGAGGAATTCCCAGTAAGTGCGGGTCATAAGCTTGCGTTGATTAAG
TCCCTGCCCTTTGTACACACCGCCCGTCGCTACTACCGATTGGATGGTTTAGTGAGGCCCTCGGATCGGC
CCCGCCGGGGTCGGCCCACGGCCCTGGCGGAGCGCTGAGAAGACGGTCGAACTTGACTATCTAGAGGAAG
TAAAAGTCGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTA"""

    # de Arabidopsis thaliana:

# athaliana_seq = 

at_seq =
"""ATCATAGTCAAAAGAAGAGTTTGATCCTGGCTCAGAAGGAACGCTAGCTATATGCTTAACACATGCAAGT
CGAACGTTGTTCTCGGGGAGCTAGGCAGAAGGAAAAGAGGCTCCTAGCTCAAGGTAGCTTGTCTCGCCCA
GGAGGCGGGAAGAGTTGAGAACAAAGTGGCGAACGGGTGCGTAAGGCGTGGGAATCTGCCGAACAGTTCG
GGCCAAATCCTGAAGAAAGCTAAAAAGCGCTGTTTGATGAGCCTGCGTAGTATTAGGTAGTTGGTTAGGT
AAAGGCTGACCAAGCCAATGATGCTTAGCTGGTCTTTTCGGATGATCAGCCACACTGGGACTGAGACACG
GCCCGGACTCCCACGGGGGGCAGCAGTGGGGAATCTTGGACAATGGGCGAAAGCCGATCCAGCAATATCG
CGTGAGTGAAGAAAGGCAATGCCGCTTGTAAAGCTCTTTCGTCGAGTGCGCGATCATGACAGGACTCGAG
GAAGAAGCCCCGGCTAACTCCGTGCCAGCAGCCGCGGTAAAACGGGGGGGGCAAGTGTTCTTCGGAATGA
CTGGGCGTAAAGGGCACGTAGGCGGTGAATCGGGTTGAAAGTGAAAGTCGCCAAAAAGTGGCGGAATGCT
TTCGAAACCAATTCACTTGAGTGAGACAGAGGAGAGTGGAATTTCGTGTGGAGGGGTGAAATCTACAGAT
CTACGAAGGAACGCCAAAAGCGAAGGCAGCTCTCTGGGTCCCTACCGACGCTGGGGGTGCGAAAGCATGG
GGGAGCGAACGGGATTAGATACCCTGGTAGTCCATGCCGTAAACGATGAGTGTTCGCCCTTGGTCTACGC
AGATCAGGGGCTCAGCTAACGCGTGAACACTCCGCCTGGGGAGTACGGTCGCAAGACCAAAACTCAAAGG
AATTGACGGGGGCCTGCACAAGCGGTGGAGCATGTGGTTTAATTCGATACAACGCGCAAAACCTTACCAG
CCCTTGACATATGAACAACAAAACCTATCCTTAACGGGATGGTACTCACTTTCATACAGGTGCTGCATGG
CTGTCGTCAGCTCGTGTCGTGAGATGTTTGGTCAAGTCCTATAACGAGCGAAACCCTCGTCTTGTGTTGC
TCAGACATGCGCCTAAGGAGAAAGGCTTGAAAACCGAAGTGAGCCAAGGAGCCGAGTGACGTGCCAGACC
TAGTAATTGAGTGACAGCAACTAGCTCTGCTCTCAGTAAGAAGGGAGACGGCGCCTTTCCAAGCCCTTTC
TAGTCTGCGCTTGAGTTTGATTGCAGCTAGCGCCGCGCTTTACTAAGAAGTGCGAAAGGGCTTTTCTCGC
TTGTTTAGTAAAGTCAAGTTTTTGACCCAGGTGACGACGACGTCGAGTTGGCGGCGGAGAAAGACTCGGC
ATTCAGGCGAGCCGCCCGGTGGTGTGGGACGAAGTAAGTGGGTTTAGTACGCCCTGCCAAAACGGCTCCG
AAACAAACAAAAAGGTGCGTGCCGCACTCACGAGGGACTGCCAGTGATATACTGGAGGAAGGTGGGGATG
ACGTCAAGTCCGCATGGCCCTTATGGGCTGGGCCACACACGTGCTACAATGGCAATTACAATGGGAAGCA
AGGCTGTAAGGCGGAGCGAATCCGGAAAGATTGCCTCAGTTCGGATTGTTCTCTGCAACTCGGGAACATG
AAGTTGGAATCGCTAGTAATCGCGGATCAGCATGCCGCGGTGAATATGTACCCGGGCCCTGTACACACCG
CCCGTCACACCCTGGGAATTGGTTTCGCCCGAAGCATCGGACCAATGATCACCCATGACTTCTGTGTACC
ACTAGTGCCACAAAGGCTTTTGGTGGTCTTATTGGCGCATACCACGGTGGGGTCTTCGACTGGGGTGAAG
TCGTAACAAGGTAGCCGTAGGGGAACCTGTGGCTGGATTGAATCC"""

# Remove the newline character ('\n') using the .replace() method. You can look
# at help(str.replace) for more information.

ec_seq = ec_seq.replace('\n','')

### Second Exercice
# Trouver la longueur de chacune des séquences:

print 'Lenght of E.coli is {ec}, of S. cerevisiae is {sc}, of A. thaliana is {at}, of H. sapien is {hs}'.format(ec= len(ec_seq), sc=len(sc_seq), at=len(at_seq),hs=len(hs_seq))                         

# **Eric**: Avoid long lines of code. They are hard to read and debug. Have
# your text editor display a marker at 80 characters and make your lines of
# code shorter than this (like this paragraph for example). This habit alone
# will make your code much easier to read. Here, why not use four print
# statements in this case? Also keep your printed messages short and avoid a
# too verbose style.

print "E. coli length: " + len(ec_seq)
print "S. cerevisiae length: " + len(sc_seq)
print "A. thaliana length: " + len(at_seq)
print "H. sapiens length: " + len(hs_seq)

### Third Exercice
# Trouver le nombre de chacun des acides nucléiques au sein des séquences (et l'insérer au sein de dictionnaires):

ans = {'A':ec_seq.count('A'),'G':ec_seq.count('G'), 'C':ec_seq.count('C'), 'T':ec_seq.count('T')}

# Eric: If the code is between parentheses, brackets or curly brackets, you can
# arrange it on multiple lines. Again, lines are cheap. What counts is
# readability. This includes having spaces around punctuation as in text. For
# example, put a space after a coma "," or a colon ":". Here is the same code
# as above but on multiple lines:

ans = {'A': ec_seq.count('A'),
    'G': ec_seq.count('G'),
    'C': ec_seq.count('C'), 
    'T': ec_seq.count('T')
    }

            #ou

other_ans = dict(zip(['A','G','C','T'], [ec_seq.count('A'), ec_seq.count('G'), ec_seq.count('C'), ec_seq.count('T')]))

# Eric: Same thing with the line above (on multiple lines and with spaces after
# commas):

other_ans = dict(zip(
    ['A', 'G', 'C', 'T'],
    [ec_seq.count('A'),
        ec_seq.count('G'),
        ec_seq.count('C'),
        ec_seq.count('T')
    ]))

            #ou

print {x:ec_seq.count(x) for x in set(ec_seq)}

# **Eric**: It is VERY advanced to use lambda (or anonymous) functions in a
# dictionary comprehension... A loop may be less elegent, but also MUCH easier
# to understand.


# Trouver l'acide nucléique le plus abondant pour chaque séquence et le moins abondant

ec_type = max(a, key=a.get)

# **Eric**: Although this is a correct answer, the above syntax is very hard to
# understand. I wouldn't expect Python newbies to understand it. Maybe explain
# here that sometimes a precice Google search is the best way to find what you
# need. For example, here the search "find key with max value python" points
# you in the right direction.

ec_num =  max(ans.values())

print 'The most present nucleic acid of 16S RNA of E. coli is {ec_type} and it appear {ec_num} times'.format(ec_type=ec_type, ec_num=ec_num),
', of 18S RNA of S. cerevisiae is {sc_type} and it appear {sc_num} times'.format(sc_type=1, sc_num=1),
', of H, sapien is {hs_type} and it appear {hs_num} times'.format(hs_type=1, hs_num=1),
' and od A. thaliana is {at_type} and it appear {at_num} times'.format(at_type=1, at_num=1)

# **Eric**: the following is much clearer in my opinion. Long lines of code are
# simply to be avoided.

print "Species\tMost frequent\tcount"
print "E. coli\t" + ec_type + "\t" + ec_num
# Change the following for the info about the other sequences
print "E. coli\t" + ec_type + "\t" + ec_num
print "E. coli\t" + ec_type + "\t" + ec_num
print "E. coli\t" + ec_type + "\t" + ec_num
# or
print "\t".join(["E. coli\t", ec_type, ec_num])

### Fourth Exercice:
# Trouver le pourcentage de GC des séquences:

print 'E. coli GC content: ' + str(float(ans['G'] + ans['C']) / len(ec_seq))

# **Eric**: The above will not work without your "from __future__ import
# division". I think it is better to let newbies know that division is special
# in Python 2.x and that you must be careful. Eg, use float():

print 'E. coli:', float(ans['G'] + ans['C']) / len(ec_seq)

# Trouver le pourcentage GC des 50 premiers et des 50 dernièrs acides nucléiques:

seq_start_ecoli = ec_seq[:50]
seq_end_ecoli = ec_seq[-50:]

boolean_symbols = {'True': '>', 'False': '<'}

print 'For {species} the begin is {sign} in GC content than the end'.format(species='E.coli', sign=boolean_symbols[str(tmp_seq > tmp_seq_end)])

### Fifth Exercice
# Find the possition of the first ATG in each sequence

ec_seq.find("ATG") + 1

### Supplementarry exercice:
# Transcribe the sequence
# print the first 50 nucleid acids in 5'- 3' orientation
# Tips1: You can use many time the same method

ec_seq_trans =  ec_seq.replace('A', 'U').replace('T','A').replace('G','N').replace('C','G').replace('N','C')[::-1]


# **Eric**: Be aware that we are counting from zero, so even if the answer
# returns 19, the first "ATG" is at the 20th nucleotide.

